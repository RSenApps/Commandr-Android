buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://download.crashlytics.com/maven' }
    }

    dependencies {
        classpath 'org.zooper.gradle:gradle-getlocalization-plugin:1.+'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'

    }
}


apply plugin: 'com.android.application'
apply plugin: 'android-getlocalization'
apply plugin: 'crashlytics'

repositories {
    maven { url 'http://download.crashlytics.com/maven' }
    maven { url 'https://dl.bintray.com/drummer-aidan/maven' }
}

getlocalization {
    user = "rsenapps"
    try {
        password = GET_LOCALIZATION_PSWD
    }
    catch (Exception e) {
        password = ""
    }
    project = "commandr"
}




dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.apptentive:apptentive-android:1.6.+@aar'
    compile project(':Donations')
    compile 'com.github.gabrielemariotti.cards:library:1.7.3'
    compile 'com.google.android.gms:play-services:6.5.87'
    compile 'com.github.gabrielemariotti.cards:library-extra:1.7.3'
    // You must install or update the Support Repository through the SDK manager to use this dependency.
    compile 'com.android.support:support-v13:+'
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.google.apis:google-api-services-gmail:v1-rev6-1.19.0'
    compile 'com.afollestad:material-dialogs:0.7.4.1'
    compile 'com.melnykov:floatingactionbutton:1.0.6'
    wearApp project(':wear')
    compile 'com.android.support:multidex:1.0.0'
    compile 'com.crashlytics.android:crashlytics:1.+'

    compile project(':seebyemessengerapicommunication')

}

android {

    /**
     * Looking for Permission
     */
    def manifestConstantsFile = file(project(':seebyemessengerapicommunication').getProjectDir().getPath() + "/manifestConstants.txt")
    def PERMISSION_MESSENGERAPI = ""
    def ACTION_MESSENGERAPI = ""
    if (manifestConstantsFile.canRead())
    {
        def Properties props = new Properties()

        props.load(new FileInputStream(manifestConstantsFile))

        PERMISSION_MESSENGERAPI = props['PERMISSION_MESSENGERAPI']
        ACTION_MESSENGERAPI = props['ACTION_MESSENGERAPI']
    }
    else
    {
        throw new GradleException("Could not read manifestConstants.txt!")
    }


    compileSdkVersion 22
    buildToolsVersion '22.0.1'
    defaultConfig {
        versionCode 22
        versionName '3.4.1'
        minSdkVersion 16
        targetSdkVersion 22
        multiDexEnabled true
    }
    lintOptions {
        disable 'AndroidLintMissingTranslation'
        abortOnError false
    }
    dexOptions {
        javaMaxHeapSize "2g"
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')

    }
    final Console console = System.console();
    if (console != null) {
        signingConfigs {
            productionConfig {
                storeFile file("commandrkeystore.jks")
                storePassword System.getenv("pswd")
                keyAlias "commandr"
                keyPassword System.getenv("pswd")
            }
        }
    } else {

        // Building from IDE's "Run" button
        signingConfigs {
            productionConfig {

            }
        }

    }
    buildTypes {
        debug {
            manifestPlaceholders = [PERMISSION_MESSENGERAPI: PERMISSION_MESSENGERAPI, ACTION_MESSENGERAPI: ACTION_MESSENGERAPI]
        }
        release {
            manifestPlaceholders = [PERMISSION_MESSENGERAPI: PERMISSION_MESSENGERAPI, ACTION_MESSENGERAPI: ACTION_MESSENGERAPI]

            minifyEnabled false
            signingConfig signingConfigs.productionConfig
            ext.betaDistributionEmails="ryanmsen@gmail.com, kristian@tigersoul.se, KinsleyThomasWong@gmail.com"
            // proguardFile 'proguard-android.txt'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def file = output.outputFile

                    output.outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.getVersionName() + ".apk")) // manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
                }
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    productFlavors {
        google {
            buildConfigField "boolean", "DONATIONS_GOOGLE", "true"
        }
    }
}
